// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package gen

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// PermissionedAccountFactoryMetaData contains all meta data concerning the PermissionedAccountFactory contract.
var PermissionedAccountFactoryMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"},{\"internalType\":\"contractIAccountManager\",\"name\":\"_accountManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contractPermissionedAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accountManager\",\"outputs\":[{\"internalType\":\"contractIAccountManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contractPermissionedAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162004ee438038062004ee48339818101604052810190620000379190620001b2565b81816040516200004790620000e1565b6200005492919062000289565b604051809103906000f08015801562000071573d6000803e3d6000fd5b5073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250505050620002b6565b613abf806200142583390190565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200012182620000f4565b9050919050565b6000620001358262000114565b9050919050565b620001478162000128565b81146200015357600080fd5b50565b60008151905062000167816200013c565b92915050565b60006200017a8262000114565b9050919050565b6200018c816200016d565b81146200019857600080fd5b50565b600081519050620001ac8162000181565b92915050565b60008060408385031215620001cc57620001cb620000ef565b5b6000620001dc8582860162000156565b9250506020620001ef858286016200019b565b9150509250929050565b6000819050919050565b6000620002246200021e6200021884620000f4565b620001f9565b620000f4565b9050919050565b6000620002388262000203565b9050919050565b60006200024c826200022b565b9050919050565b6200025e816200023f565b82525050565b600062000271826200022b565b9050919050565b620002838162000264565b82525050565b6000604082019050620002a0600083018562000253565b620002af602083018462000278565b9392505050565b60805160a05161112d620002f86000396000818161012f015281816102c80152610459015260008181610109015281816102050152610387015261112d6000f3fe60806040523480156200001157600080fd5b5060043610620000525760003560e01c806311464fbe14620000575780635fbfb9cf14620000795780638cb84e1814620000af57806391c2c46914620000e5575b600080fd5b6200006162000107565b60405162000070919062000556565b60405180910390f35b620000976004803603810190620000919190620005f8565b6200012b565b604051620000a6919062000556565b60405180910390f35b620000cd6004803603810190620000c79190620005f8565b620002c4565b604051620000dc919062000650565b60405180910390f35b620000ef62000457565b604051620000fe9190620006a6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614620001be576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001b59062000724565b60405180910390fd5b6000620001cc8484620002c4565b905060008173ffffffffffffffffffffffffffffffffffffffff163b90506000811115620001ff578192505050620002be565b8360001b7f00000000000000000000000000000000000000000000000000000000000000008660405160240162000237919062000650565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516200028a90620004bd565b62000297929190620007e0565b8190604051809103906000f5905080158015620002b8573d6000803e3d6000fd5b50925050505b92915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161462000357576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200034e9062000724565b60405180910390fd5b6200044f8260001b604051806020016200037190620004bd565b6020820181038252601f19601f820116604052507f000000000000000000000000000000000000000000000000000000000000000086604051602401620003b9919062000650565b60405160208183030381529060405263c4d66de860e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405160200162000411929190620007e0565b6040516020818303038152906040526040516020016200043392919062000856565b604051602081830303815290604052805190602001206200047b565b905092915050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006200048a83833062000492565b905092915050565b6000604051836040820152846020820152828152600b810160ff815360558120925050509392505050565b610879806200087f83390190565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600062000516620005106200050a84620004cb565b620004eb565b620004cb565b9050919050565b60006200052a82620004f5565b9050919050565b60006200053e826200051d565b9050919050565b620005508162000531565b82525050565b60006020820190506200056d600083018462000545565b92915050565b600080fd5b60006200058582620004cb565b9050919050565b620005978162000578565b8114620005a357600080fd5b50565b600081359050620005b7816200058c565b92915050565b6000819050919050565b620005d281620005bd565b8114620005de57600080fd5b50565b600081359050620005f281620005c7565b92915050565b6000806040838503121562000612576200061162000573565b5b60006200062285828601620005a6565b92505060206200063585828601620005e1565b9150509250929050565b6200064a8162000578565b82525050565b60006020820190506200066760008301846200063f565b92915050565b60006200067a82620004f5565b9050919050565b60006200068e826200066d565b9050919050565b620006a08162000681565b82525050565b6000602082019050620006bd600083018462000695565b92915050565b600082825260208201905092915050565b7f6f6e6c79206163636f756e74206d616e61676572000000000000000000000000600082015250565b60006200070c601483620006c3565b91506200071982620006d4565b602082019050919050565b600060208201905081810360008301526200073f81620006fd565b9050919050565b600081519050919050565b600082825260208201905092915050565b60005b838110156200078257808201518184015260208101905062000765565b60008484015250505050565b6000601f19601f8301169050919050565b6000620007ac8262000746565b620007b8818562000751565b9350620007ca81856020860162000762565b620007d5816200078e565b840191505092915050565b6000604082019050620007f760008301856200063f565b81810360208301526200080b81846200079f565b90509392505050565b600081905092915050565b60006200082c8262000746565b62000838818562000814565b93506200084a81856020860162000762565b80840191505092915050565b60006200086482856200081f565b91506200087282846200081f565b9150819050939250505056fe608060405260405161087938038061087983398181016040528101906100259190610520565b6100378282600061003e60201b60201c565b505061074f565b61004d8361007660201b60201c565b60008251118061005a5750805b156100715761006f83836100cb60201b60201c565b505b505050565b610085816100fe60201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b60606100f68383604051806060016040528060278152602001610852602791396101c360201b60201c565b905092915050565b61010d8161024f60201b60201c565b61014c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610143906105ff565b60405180910390fd5b8061017f7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61027260201b60201c565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101ed9190610666565b600060405180830381855af49150503d8060008114610228576040519150601f19603f3d011682016040523d82523d6000602084013e61022d565b606091505b50915091506102448683838761027c60201b60201c565b925050509392505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000819050919050565b606083156102e45760008351036102dc5761029c8561024f60201b60201c565b6102db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d2906106c9565b60405180910390fd5b5b8290506102f5565b6102f483836102fd60201b60201c565b5b949350505050565b6000825111156103105781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610344919061072d565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061038c82610361565b9050919050565b61039c81610381565b81146103a757600080fd5b50565b6000815190506103b981610393565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610412826103c9565b810181811067ffffffffffffffff82111715610431576104306103da565b5b80604052505050565b600061044461034d565b90506104508282610409565b919050565b600067ffffffffffffffff8211156104705761046f6103da565b5b610479826103c9565b9050602081019050919050565b60005b838110156104a4578082015181840152602081019050610489565b60008484015250505050565b60006104c36104be84610455565b61043a565b9050828152602081018484840111156104df576104de6103c4565b5b6104ea848285610486565b509392505050565b600082601f830112610507576105066103bf565b5b81516105178482602086016104b0565b91505092915050565b6000806040838503121561053757610536610357565b5b6000610545858286016103aa565b925050602083015167ffffffffffffffff8111156105665761056561035c565b5b610572858286016104f2565b9150509250929050565b600082825260208201905092915050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b60006105e9602d8361057c565b91506105f48261058d565b604082019050919050565b60006020820190508181036000830152610618816105dc565b9050919050565b600081519050919050565b600081905092915050565b60006106408261061f565b61064a818561062a565b935061065a818560208601610486565b80840191505092915050565b60006106728284610635565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006106b3601d8361057c565b91506106be8261067d565b602082019050919050565b600060208201905081810360008301526106e2816106a6565b9050919050565b600081519050919050565b60006106ff826106e9565b610709818561057c565b9350610719818560208601610486565b610722816103c9565b840191505092915050565b6000602082019050818103600083015261074781846106f4565b905092915050565b60f58061075d6000396000f3fe608060405236601057600e6018565b005b60166018565b005b601e602c565b602a6026602e565b603b565b565b565b600060366060565b905090565b3660008037600080366000845af43d6000803e8060008114605b573d6000f35b3d6000fd5b6000608c7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b60b5565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600081905091905056fea26469706673582212209400302f8ad128e41765f5aa274e8bbf439171c2c7b20c69652259c2d94f687a64736f6c63430008130033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a264697066735822122087a02d26c6aa5364cea032ad48d8dccd42c652c0e1696539bc264cd06447fdc564736f6c6343000813003360e06040523073ffffffffffffffffffffffffffffffffffffffff1660809073ffffffffffffffffffffffffffffffffffffffff168152503480156200004457600080fd5b5060405162003abf38038062003abf83398181016040528101906200006a919062000273565b8173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1681525050620000e2620000ea60201b60201c565b50506200039e565b600060019054906101000a900460ff16156200013d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001349062000341565b60405180910390fd5b60ff801660008054906101000a900460ff1660ff1614620001ae5760ff6000806101000a81548160ff021916908360ff1602179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249860ff604051620001a5919062000381565b60405180910390a15b565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001e282620001b5565b9050919050565b6000620001f682620001d5565b9050919050565b6200020881620001e9565b81146200021457600080fd5b50565b6000815190506200022881620001fd565b92915050565b60006200023b82620001d5565b9050919050565b6200024d816200022e565b81146200025957600080fd5b50565b6000815190506200026d8162000242565b92915050565b600080604083850312156200028d576200028c620001b0565b5b60006200029d8582860162000217565b9250506020620002b0858286016200025c565b9150509250929050565b600082825260208201905092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320696e69746960008201527f616c697a696e6700000000000000000000000000000000000000000000000000602082015250565b600062000329602783620002ba565b91506200033682620002cb565b604082019050919050565b600060208201905081810360008301526200035c816200031a565b9050919050565b600060ff82169050919050565b6200037b8162000363565b82525050565b600060208201905062000398600083018462000370565b92915050565b60805160a05160c0516136c7620003f86000396000818161074b01526115ad015260008181610d0501526116db0152600081816105970152818161062501528181610ae801528181610b760152610c2601526136c76000f3fe60806040526004361061010c5760003560e01c806352d1902d11610095578063bc197c8111610064578063bc197c8114610343578063c399ec8814610380578063c4d66de8146103ab578063d087d288146103d4578063f23a6e61146103ff57610113565b806352d1902d146102995780638da5cb5b146102c4578063b0d691fe146102ef578063b61d27f61461031a57610113565b80633a871cdd116100dc5780633a871cdd146101e457806347e1da2a146102215780634a58db191461024a5780634d44560d146102545780634f1ef2861461027d57610113565b806223de291461011857806301ffc9a714610141578063150b7a021461017e5780633659cfe6146101bb57610113565b3661011357005b600080fd5b34801561012457600080fd5b5061013f600480360381019061013a9190611e02565b61043c565b005b34801561014d57600080fd5b5061016860048036038101906101639190611f29565b610446565b6040516101759190611f71565b60405180910390f35b34801561018a57600080fd5b506101a560048036038101906101a09190611f8c565b610580565b6040516101b29190612023565b60405180910390f35b3480156101c757600080fd5b506101e260048036038101906101dd919061203e565b610595565b005b3480156101f057600080fd5b5061020b600480360381019061020691906120c6565b61071d565b6040516102189190612144565b60405180910390f35b34801561022d57600080fd5b5061024860048036038101906102439190612261565b6107d9565b005b6102526109f1565b005b34801561026057600080fd5b5061027b60048036038101906102769190612353565b610a66565b005b610297600480360381019061029291906124d4565b610ae6565b005b3480156102a557600080fd5b506102ae610c22565b6040516102bb919061253f565b60405180910390f35b3480156102d057600080fd5b506102d9610cdb565b6040516102e69190612569565b60405180910390f35b3480156102fb57600080fd5b50610304610d01565b60405161031191906125e3565b60405180910390f35b34801561032657600080fd5b50610341600480360381019061033c91906125fe565b610d29565b005b34801561034f57600080fd5b5061036a60048036038101906103659190612672565b610d86565b6040516103779190612023565b60405180910390f35b34801561038c57600080fd5b50610395610d9e565b6040516103a29190612144565b60405180910390f35b3480156103b757600080fd5b506103d260048036038101906103cd919061203e565b610e26565b005b3480156103e057600080fd5b506103e9610f66565b6040516103f69190612144565b60405180910390f35b34801561040b57600080fd5b506104266004803603810190610421919061274e565b610ff1565b6040516104339190612023565b60405180910390f35b5050505050505050565b60007f150b7a02000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051157507f4e2312e0000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b8061057957507f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b9050919050565b600063150b7a0260e01b905095945050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610623576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061a9061286b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610662611007565b73ffffffffffffffffffffffffffffffffffffffff16146106b8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106af906128fd565b60405180910390fd5b6106c18161105e565b61071a81600067ffffffffffffffff8111156106e0576106df6123a9565b5b6040519080825280601f01601f1916602001820160405280156107125781602001600182028036833780820191505090505b506000611069565b50565b60006107276111d7565b610731848461124e565b9050610740846020013561132c565b6107498261132f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16639021ce1e856040518263ffffffff1660e01b81526004016107a29190612b7d565b60006040518083038186803b1580156107ba57600080fd5b505afa1580156107ce573d6000803e3d6000fd5b505050509392505050565b6107e16113cb565b81819050868690501480156108095750600084849050148061080857508181905084849050145b5b610848576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083f90612beb565b60405180910390fd5b600084849050036109145760005b8686905081101561090e576108fb87878381811061087757610876612c0b565b5b905060200201602081019061088c919061203e565b60008585858181106108a1576108a0612c0b565b5b90506020028101906108b39190612c49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061149a565b808061090690612cdb565b915050610856565b506109e9565b60005b868690508110156109e7576109d487878381811061093857610937612c0b565b5b905060200201602081019061094d919061203e565b8686848181106109605761095f612c0b565b5b9050602002013585858581811061097a57610979612c0b565b5b905060200281019061098c9190612c49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061149a565b80806109df90612cdb565b915050610917565b505b505050505050565b6109f9610d01565b73ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b8152600401610a329190612569565b6000604051808303818588803b158015610a4b57600080fd5b505af1158015610a5f573d6000803e3d6000fd5b5050505050565b610a6e61151e565b610a76610d01565b73ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b8152600401610ab0929190612d32565b600060405180830381600087803b158015610aca57600080fd5b505af1158015610ade573d6000803e3d6000fd5b505050505050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1603610b74576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6b9061286b565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610bb3611007565b73ffffffffffffffffffffffffffffffffffffffff1614610c09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c00906128fd565b60405180910390fd5b610c128261105e565b610c1e82826001611069565b5050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163073ffffffffffffffffffffffffffffffffffffffff1614610cb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca990612dcd565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b905090565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610d316113cb565b610d80848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505061149a565b50505050565b600063bc197c8160e01b905098975050505050505050565b6000610da8610d01565b73ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610de09190612569565b602060405180830381865afa158015610dfd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e219190612e02565b905090565b60008060019054906101000a900460ff16159050808015610e575750600160008054906101000a900460ff1660ff16105b80610e845750610e663061163c565b158015610e835750600160008054906101000a900460ff1660ff16145b5b610ec3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eba90612ea1565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055508015610f00576001600060016101000a81548160ff0219169083151502179055505b610f098261165f565b8015610f625760008060016101000a81548160ff0219169083151502179055507f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024986001604051610f599190612f09565b60405180910390a15b5050565b6000610f70610d01565b73ffffffffffffffffffffffffffffffffffffffff166335567e1a3060006040518363ffffffff1660e01b8152600401610fab929190612f83565b602060405180830381865afa158015610fc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fec9190612e02565b905090565b600063f23a6e6160e01b90509695505050505050565b60006110357f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61173f565b60000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b61106661151e565b50565b6110957f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd914360001b611749565b60000160009054906101000a900460ff16156110b9576110b483611753565b6111d2565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561112157506040513d601f19601f8201168201806040525081019061111e9190612fc1565b60015b611160576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115790613060565b60405180910390fd5b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b81146111c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111bc906130f2565b60405180910390fd5b506111d183838361180c565b5b505050565b6111df610d01565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461124c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112439061315e565b60405180910390fd5b565b60008061125a83611838565b90506112c2848061014001906112709190612c49565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050508261186e90919063ffffffff16565b73ffffffffffffffffffffffffffffffffffffffff16600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611320576001915050611326565b60009150505b92915050565b50565b600081146113c85760003373ffffffffffffffffffffffffffffffffffffffff16827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9060405161137f906131af565b600060405180830381858888f193505050503d80600081146113bd576040519150601f19603f3d011682016040523d82523d6000602084013e6113c2565b606091505b50509050505b50565b6113d3610d01565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806114595750600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b611498576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161148f90613210565b60405180910390fd5b565b6000808473ffffffffffffffffffffffffffffffffffffffff1684846040516114c39190613296565b60006040518083038185875af1925050503d8060008114611500576040519150601f19603f3d011682016040523d82523d6000602084013e611505565b606091505b50915091508161151757805160208201fd5b5050505050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806115a557503073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b806115fb57507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b61163a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611631906132f9565b60405180910390fd5b565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b80600060026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff167fd56ea6e8d20b617e87607e4bcff03865872cb2d6bd3b2fa45df0be0affd7637560405160405180910390a350565b6000819050919050565b6000819050919050565b61175c8161163c565b61179b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117929061338b565b60405180910390fd5b806117c87f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61173f565b60000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61181583611895565b6000825111806118225750805b156118335761183183836118e4565b505b505050565b60007f19457468657265756d205369676e6564204d6573736167653a0a33320000000060005281601c52603c6000209050919050565b600080600061187d8585611911565b9150915061188a81611962565b819250505092915050565b61189e81611753565b8073ffffffffffffffffffffffffffffffffffffffff167fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b60405160405180910390a250565b6060611909838360405180606001604052806027815260200161366b60279139611ac8565b905092915050565b60008060418351036119525760008060006020860151925060408601519150606086015160001a905061194687828585611b4e565b9450945050505061195b565b60006002915091505b9250929050565b60006004811115611976576119756133ab565b5b816004811115611989576119886133ab565b5b0315611ac557600160048111156119a3576119a26133ab565b5b8160048111156119b6576119b56133ab565b5b036119f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119ed90613426565b60405180910390fd5b60026004811115611a0a57611a096133ab565b5b816004811115611a1d57611a1c6133ab565b5b03611a5d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a5490613492565b60405180910390fd5b60036004811115611a7157611a706133ab565b5b816004811115611a8457611a836133ab565b5b03611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb90613524565b60405180910390fd5b5b50565b60606000808573ffffffffffffffffffffffffffffffffffffffff1685604051611af29190613296565b600060405180830381855af49150503d8060008114611b2d576040519150601f19603f3d011682016040523d82523d6000602084013e611b32565b606091505b5091509150611b4386838387611c30565b925050509392505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08360001c1115611b89576000600391509150611c27565b600060018787878760405160008152602001604052604051611bae9493929190613553565b6020604051602081039080840390855afa158015611bd0573d6000803e3d6000fd5b505050602060405103519050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603611c1e57600060019250925050611c27565b80600092509250505b94509492505050565b60608315611c92576000835103611c8a57611c4a8561163c565b611c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c80906135e4565b60405180910390fd5b5b829050611c9d565b611c9c8383611ca5565b5b949350505050565b600082511115611cb85781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cec9190613648565b60405180910390fd5b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d3482611d09565b9050919050565b611d4481611d29565b8114611d4f57600080fd5b50565b600081359050611d6181611d3b565b92915050565b6000819050919050565b611d7a81611d67565b8114611d8557600080fd5b50565b600081359050611d9781611d71565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611dc257611dc1611d9d565b5b8235905067ffffffffffffffff811115611ddf57611dde611da2565b5b602083019150836001820283011115611dfb57611dfa611da7565b5b9250929050565b60008060008060008060008060c0898b031215611e2257611e21611cff565b5b6000611e308b828c01611d52565b9850506020611e418b828c01611d52565b9750506040611e528b828c01611d52565b9650506060611e638b828c01611d88565b955050608089013567ffffffffffffffff811115611e8457611e83611d04565b5b611e908b828c01611dac565b945094505060a089013567ffffffffffffffff811115611eb357611eb2611d04565b5b611ebf8b828c01611dac565b92509250509295985092959890939650565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b611f0681611ed1565b8114611f1157600080fd5b50565b600081359050611f2381611efd565b92915050565b600060208284031215611f3f57611f3e611cff565b5b6000611f4d84828501611f14565b91505092915050565b60008115159050919050565b611f6b81611f56565b82525050565b6000602082019050611f866000830184611f62565b92915050565b600080600080600060808688031215611fa857611fa7611cff565b5b6000611fb688828901611d52565b9550506020611fc788828901611d52565b9450506040611fd888828901611d88565b935050606086013567ffffffffffffffff811115611ff957611ff8611d04565b5b61200588828901611dac565b92509250509295509295909350565b61201d81611ed1565b82525050565b60006020820190506120386000830184612014565b92915050565b60006020828403121561205457612053611cff565b5b600061206284828501611d52565b91505092915050565b600080fd5b600061016082840312156120875761208661206b565b5b81905092915050565b6000819050919050565b6120a381612090565b81146120ae57600080fd5b50565b6000813590506120c08161209a565b92915050565b6000806000606084860312156120df576120de611cff565b5b600084013567ffffffffffffffff8111156120fd576120fc611d04565b5b61210986828701612070565b935050602061211a868287016120b1565b925050604061212b86828701611d88565b9150509250925092565b61213e81611d67565b82525050565b60006020820190506121596000830184612135565b92915050565b60008083601f84011261217557612174611d9d565b5b8235905067ffffffffffffffff81111561219257612191611da2565b5b6020830191508360208202830111156121ae576121ad611da7565b5b9250929050565b60008083601f8401126121cb576121ca611d9d565b5b8235905067ffffffffffffffff8111156121e8576121e7611da2565b5b60208301915083602082028301111561220457612203611da7565b5b9250929050565b60008083601f84011261222157612220611d9d565b5b8235905067ffffffffffffffff81111561223e5761223d611da2565b5b60208301915083602082028301111561225a57612259611da7565b5b9250929050565b6000806000806000806060878903121561227e5761227d611cff565b5b600087013567ffffffffffffffff81111561229c5761229b611d04565b5b6122a889828a0161215f565b9650965050602087013567ffffffffffffffff8111156122cb576122ca611d04565b5b6122d789828a016121b5565b9450945050604087013567ffffffffffffffff8111156122fa576122f9611d04565b5b61230689828a0161220b565b92509250509295509295509295565b600061232082611d09565b9050919050565b61233081612315565b811461233b57600080fd5b50565b60008135905061234d81612327565b92915050565b6000806040838503121561236a57612369611cff565b5b60006123788582860161233e565b925050602061238985828601611d88565b9150509250929050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123e182612398565b810181811067ffffffffffffffff82111715612400576123ff6123a9565b5b80604052505050565b6000612413611cf5565b905061241f82826123d8565b919050565b600067ffffffffffffffff82111561243f5761243e6123a9565b5b61244882612398565b9050602081019050919050565b82818337600083830152505050565b600061247761247284612424565b612409565b90508281526020810184848401111561249357612492612393565b5b61249e848285612455565b509392505050565b600082601f8301126124bb576124ba611d9d565b5b81356124cb848260208601612464565b91505092915050565b600080604083850312156124eb576124ea611cff565b5b60006124f985828601611d52565b925050602083013567ffffffffffffffff81111561251a57612519611d04565b5b612526858286016124a6565b9150509250929050565b61253981612090565b82525050565b60006020820190506125546000830184612530565b92915050565b61256381611d29565b82525050565b600060208201905061257e600083018461255a565b92915050565b6000819050919050565b60006125a96125a461259f84611d09565b612584565b611d09565b9050919050565b60006125bb8261258e565b9050919050565b60006125cd826125b0565b9050919050565b6125dd816125c2565b82525050565b60006020820190506125f860008301846125d4565b92915050565b6000806000806060858703121561261857612617611cff565b5b600061262687828801611d52565b945050602061263787828801611d88565b935050604085013567ffffffffffffffff81111561265857612657611d04565b5b61266487828801611dac565b925092505092959194509250565b60008060008060008060008060a0898b03121561269257612691611cff565b5b60006126a08b828c01611d52565b98505060206126b18b828c01611d52565b975050604089013567ffffffffffffffff8111156126d2576126d1611d04565b5b6126de8b828c016121b5565b9650965050606089013567ffffffffffffffff81111561270157612700611d04565b5b61270d8b828c016121b5565b9450945050608089013567ffffffffffffffff8111156127305761272f611d04565b5b61273c8b828c01611dac565b92509250509295985092959890939650565b60008060008060008060a0878903121561276b5761276a611cff565b5b600061277989828a01611d52565b965050602061278a89828a01611d52565b955050604061279b89828a01611d88565b94505060606127ac89828a01611d88565b935050608087013567ffffffffffffffff8111156127cd576127cc611d04565b5b6127d989828a01611dac565b92509250509295509295509295565b600082825260208201905092915050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f64656c656761746563616c6c0000000000000000000000000000000000000000602082015250565b6000612855602c836127e8565b9150612860826127f9565b604082019050919050565b6000602082019050818103600083015261288481612848565b9050919050565b7f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060008201527f6163746976652070726f78790000000000000000000000000000000000000000602082015250565b60006128e7602c836127e8565b91506128f28261288b565b604082019050919050565b60006020820190508181036000830152612916816128da565b9050919050565b600061292c6020840184611d52565b905092915050565b61293d81611d29565b82525050565b60006129526020840184611d88565b905092915050565b61296381611d67565b82525050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261299557612994612973565b5b83810192508235915060208301925067ffffffffffffffff8211156129bd576129bc612969565b5b6001820236038313156129d3576129d261296e565b5b509250929050565b600082825260208201905092915050565b60006129f883856129db565b9350612a05838584612455565b612a0e83612398565b840190509392505050565b60006101608301612a2d600084018461291d565b612a3a6000860182612934565b50612a486020840184612943565b612a55602086018261295a565b50612a636040840184612978565b8583036040870152612a768382846129ec565b92505050612a876060840184612978565b8583036060870152612a9a8382846129ec565b92505050612aab6080840184612943565b612ab8608086018261295a565b50612ac660a0840184612943565b612ad360a086018261295a565b50612ae160c0840184612943565b612aee60c086018261295a565b50612afc60e0840184612943565b612b0960e086018261295a565b50612b18610100840184612943565b612b2661010086018261295a565b50612b35610120840184612978565b858303610120870152612b498382846129ec565b92505050612b5b610140840184612978565b858303610140870152612b6f8382846129ec565b925050508091505092915050565b60006020820190508181036000830152612b978184612a19565b905092915050565b7f77726f6e67206172726179206c656e6774687300000000000000000000000000600082015250565b6000612bd56013836127e8565b9150612be082612b9f565b602082019050919050565b60006020820190508181036000830152612c0481612bc8565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112612c6657612c65612c3a565b5b80840192508235915067ffffffffffffffff821115612c8857612c87612c3f565b5b602083019250600182023603831315612ca457612ca3612c44565b5b509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ce682611d67565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612d1857612d17612cac565b5b600182019050919050565b612d2c81612315565b82525050565b6000604082019050612d476000830185612d23565b612d546020830184612135565b9392505050565b7f555550535570677261646561626c653a206d757374206e6f742062652063616c60008201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000602082015250565b6000612db76038836127e8565b9150612dc282612d5b565b604082019050919050565b60006020820190508181036000830152612de681612daa565b9050919050565b600081519050612dfc81611d71565b92915050565b600060208284031215612e1857612e17611cff565b5b6000612e2684828501612ded565b91505092915050565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b6000612e8b602e836127e8565b9150612e9682612e2f565b604082019050919050565b60006020820190508181036000830152612eba81612e7e565b9050919050565b6000819050919050565b600060ff82169050919050565b6000612ef3612eee612ee984612ec1565b612584565b612ecb565b9050919050565b612f0381612ed8565b82525050565b6000602082019050612f1e6000830184612efa565b92915050565b6000819050919050565b600077ffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b6000612f6d612f68612f6384612f24565b612584565b612f2e565b9050919050565b612f7d81612f52565b82525050565b6000604082019050612f98600083018561255a565b612fa56020830184612f74565b9392505050565b600081519050612fbb8161209a565b92915050565b600060208284031215612fd757612fd6611cff565b5b6000612fe584828501612fac565b91505092915050565b7f45524331393637557067726164653a206e657720696d706c656d656e7461746960008201527f6f6e206973206e6f742055555053000000000000000000000000000000000000602082015250565b600061304a602e836127e8565b915061305582612fee565b604082019050919050565b600060208201905081810360008301526130798161303d565b9050919050565b7f45524331393637557067726164653a20756e737570706f727465642070726f7860008201527f6961626c65555549440000000000000000000000000000000000000000000000602082015250565b60006130dc6029836127e8565b91506130e782613080565b604082019050919050565b6000602082019050818103600083015261310b816130cf565b9050919050565b7f6163636f756e743a206e6f742066726f6d20456e747279506f696e7400000000600082015250565b6000613148601c836127e8565b915061315382613112565b602082019050919050565b600060208201905081810360008301526131778161313b565b9050919050565b600081905092915050565b50565b600061319960008361317e565b91506131a482613189565b600082019050919050565b60006131ba8261318c565b9150819050919050565b7f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e74600082015250565b60006131fa6020836127e8565b9150613205826131c4565b602082019050919050565b60006020820190508181036000830152613229816131ed565b9050919050565b600081519050919050565b60005b8381101561325957808201518184015260208101905061323e565b60008484015250505050565b600061327082613230565b61327a818561317e565b935061328a81856020860161323b565b80840191505092915050565b60006132a28284613265565b915081905092915050565b7f6f6e6c79206f776e6572206f72206d616e616765720000000000000000000000600082015250565b60006132e36015836127e8565b91506132ee826132ad565b602082019050919050565b60006020820190508181036000830152613312816132d6565b9050919050565b7f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60008201527f6f74206120636f6e747261637400000000000000000000000000000000000000602082015250565b6000613375602d836127e8565b915061338082613319565b604082019050919050565b600060208201905081810360008301526133a481613368565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45434453413a20696e76616c6964207369676e61747572650000000000000000600082015250565b60006134106018836127e8565b915061341b826133da565b602082019050919050565b6000602082019050818103600083015261343f81613403565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265206c656e67746800600082015250565b600061347c601f836127e8565b915061348782613446565b602082019050919050565b600060208201905081810360008301526134ab8161346f565b9050919050565b7f45434453413a20696e76616c6964207369676e6174757265202773272076616c60008201527f7565000000000000000000000000000000000000000000000000000000000000602082015250565b600061350e6022836127e8565b9150613519826134b2565b604082019050919050565b6000602082019050818103600083015261353d81613501565b9050919050565b61354d81612ecb565b82525050565b60006080820190506135686000830187612530565b6135756020830186613544565b6135826040830185612530565b61358f6060830184612530565b95945050505050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006135ce601d836127e8565b91506135d982613598565b602082019050919050565b600060208201905081810360008301526135fd816135c1565b9050919050565b600081519050919050565b600061361a82613604565b61362481856127e8565b935061363481856020860161323b565b61363d81612398565b840191505092915050565b60006020820190508181036000830152613662818461360f565b90509291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212202f76ee575013ad59729829fa06a6e87b030b84702827fed4df928012d4c1e8fc64736f6c63430008130033",
}

// PermissionedAccountFactoryABI is the input ABI used to generate the binding from.
// Deprecated: Use PermissionedAccountFactoryMetaData.ABI instead.
var PermissionedAccountFactoryABI = PermissionedAccountFactoryMetaData.ABI

// PermissionedAccountFactoryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use PermissionedAccountFactoryMetaData.Bin instead.
var PermissionedAccountFactoryBin = PermissionedAccountFactoryMetaData.Bin

// DeployPermissionedAccountFactory deploys a new Ethereum contract, binding an instance of PermissionedAccountFactory to it.
func DeployPermissionedAccountFactory(auth *bind.TransactOpts, backend bind.ContractBackend, _entryPoint common.Address, _accountManager common.Address) (common.Address, *types.Transaction, *PermissionedAccountFactory, error) {
	parsed, err := PermissionedAccountFactoryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(PermissionedAccountFactoryBin), backend, _entryPoint, _accountManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &PermissionedAccountFactory{PermissionedAccountFactoryCaller: PermissionedAccountFactoryCaller{contract: contract}, PermissionedAccountFactoryTransactor: PermissionedAccountFactoryTransactor{contract: contract}, PermissionedAccountFactoryFilterer: PermissionedAccountFactoryFilterer{contract: contract}}, nil
}

// PermissionedAccountFactory is an auto generated Go binding around an Ethereum contract.
type PermissionedAccountFactory struct {
	PermissionedAccountFactoryCaller     // Read-only binding to the contract
	PermissionedAccountFactoryTransactor // Write-only binding to the contract
	PermissionedAccountFactoryFilterer   // Log filterer for contract events
}

// PermissionedAccountFactoryCaller is an auto generated read-only Go binding around an Ethereum contract.
type PermissionedAccountFactoryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PermissionedAccountFactoryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type PermissionedAccountFactoryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PermissionedAccountFactoryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type PermissionedAccountFactoryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// PermissionedAccountFactorySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type PermissionedAccountFactorySession struct {
	Contract     *PermissionedAccountFactory // Generic contract binding to set the session for
	CallOpts     bind.CallOpts               // Call options to use throughout this session
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// PermissionedAccountFactoryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type PermissionedAccountFactoryCallerSession struct {
	Contract *PermissionedAccountFactoryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                     // Call options to use throughout this session
}

// PermissionedAccountFactoryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type PermissionedAccountFactoryTransactorSession struct {
	Contract     *PermissionedAccountFactoryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                     // Transaction auth options to use throughout this session
}

// PermissionedAccountFactoryRaw is an auto generated low-level Go binding around an Ethereum contract.
type PermissionedAccountFactoryRaw struct {
	Contract *PermissionedAccountFactory // Generic contract binding to access the raw methods on
}

// PermissionedAccountFactoryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type PermissionedAccountFactoryCallerRaw struct {
	Contract *PermissionedAccountFactoryCaller // Generic read-only contract binding to access the raw methods on
}

// PermissionedAccountFactoryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type PermissionedAccountFactoryTransactorRaw struct {
	Contract *PermissionedAccountFactoryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewPermissionedAccountFactory creates a new instance of PermissionedAccountFactory, bound to a specific deployed contract.
func NewPermissionedAccountFactory(address common.Address, backend bind.ContractBackend) (*PermissionedAccountFactory, error) {
	contract, err := bindPermissionedAccountFactory(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &PermissionedAccountFactory{PermissionedAccountFactoryCaller: PermissionedAccountFactoryCaller{contract: contract}, PermissionedAccountFactoryTransactor: PermissionedAccountFactoryTransactor{contract: contract}, PermissionedAccountFactoryFilterer: PermissionedAccountFactoryFilterer{contract: contract}}, nil
}

// NewPermissionedAccountFactoryCaller creates a new read-only instance of PermissionedAccountFactory, bound to a specific deployed contract.
func NewPermissionedAccountFactoryCaller(address common.Address, caller bind.ContractCaller) (*PermissionedAccountFactoryCaller, error) {
	contract, err := bindPermissionedAccountFactory(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &PermissionedAccountFactoryCaller{contract: contract}, nil
}

// NewPermissionedAccountFactoryTransactor creates a new write-only instance of PermissionedAccountFactory, bound to a specific deployed contract.
func NewPermissionedAccountFactoryTransactor(address common.Address, transactor bind.ContractTransactor) (*PermissionedAccountFactoryTransactor, error) {
	contract, err := bindPermissionedAccountFactory(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &PermissionedAccountFactoryTransactor{contract: contract}, nil
}

// NewPermissionedAccountFactoryFilterer creates a new log filterer instance of PermissionedAccountFactory, bound to a specific deployed contract.
func NewPermissionedAccountFactoryFilterer(address common.Address, filterer bind.ContractFilterer) (*PermissionedAccountFactoryFilterer, error) {
	contract, err := bindPermissionedAccountFactory(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &PermissionedAccountFactoryFilterer{contract: contract}, nil
}

// bindPermissionedAccountFactory binds a generic wrapper to an already deployed contract.
func bindPermissionedAccountFactory(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := PermissionedAccountFactoryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PermissionedAccountFactory *PermissionedAccountFactoryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PermissionedAccountFactory.Contract.PermissionedAccountFactoryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PermissionedAccountFactory *PermissionedAccountFactoryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PermissionedAccountFactory.Contract.PermissionedAccountFactoryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PermissionedAccountFactory *PermissionedAccountFactoryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PermissionedAccountFactory.Contract.PermissionedAccountFactoryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_PermissionedAccountFactory *PermissionedAccountFactoryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _PermissionedAccountFactory.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_PermissionedAccountFactory *PermissionedAccountFactoryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _PermissionedAccountFactory.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_PermissionedAccountFactory *PermissionedAccountFactoryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _PermissionedAccountFactory.Contract.contract.Transact(opts, method, params...)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactoryCaller) AccountImplementation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PermissionedAccountFactory.contract.Call(opts, &out, "accountImplementation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactorySession) AccountImplementation() (common.Address, error) {
	return _PermissionedAccountFactory.Contract.AccountImplementation(&_PermissionedAccountFactory.CallOpts)
}

// AccountImplementation is a free data retrieval call binding the contract method 0x11464fbe.
//
// Solidity: function accountImplementation() view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactoryCallerSession) AccountImplementation() (common.Address, error) {
	return _PermissionedAccountFactory.Contract.AccountImplementation(&_PermissionedAccountFactory.CallOpts)
}

// AccountManager is a free data retrieval call binding the contract method 0x91c2c469.
//
// Solidity: function accountManager() view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactoryCaller) AccountManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _PermissionedAccountFactory.contract.Call(opts, &out, "accountManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AccountManager is a free data retrieval call binding the contract method 0x91c2c469.
//
// Solidity: function accountManager() view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactorySession) AccountManager() (common.Address, error) {
	return _PermissionedAccountFactory.Contract.AccountManager(&_PermissionedAccountFactory.CallOpts)
}

// AccountManager is a free data retrieval call binding the contract method 0x91c2c469.
//
// Solidity: function accountManager() view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactoryCallerSession) AccountManager() (common.Address, error) {
	return _PermissionedAccountFactory.Contract.AccountManager(&_PermissionedAccountFactory.CallOpts)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactoryCaller) GetAddress(opts *bind.CallOpts, owner common.Address, salt *big.Int) (common.Address, error) {
	var out []interface{}
	err := _PermissionedAccountFactory.contract.Call(opts, &out, "getAddress", owner, salt)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactorySession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _PermissionedAccountFactory.Contract.GetAddress(&_PermissionedAccountFactory.CallOpts, owner, salt)
}

// GetAddress is a free data retrieval call binding the contract method 0x8cb84e18.
//
// Solidity: function getAddress(address owner, uint256 salt) view returns(address)
func (_PermissionedAccountFactory *PermissionedAccountFactoryCallerSession) GetAddress(owner common.Address, salt *big.Int) (common.Address, error) {
	return _PermissionedAccountFactory.Contract.GetAddress(&_PermissionedAccountFactory.CallOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_PermissionedAccountFactory *PermissionedAccountFactoryTransactor) CreateAccount(opts *bind.TransactOpts, owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _PermissionedAccountFactory.contract.Transact(opts, "createAccount", owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_PermissionedAccountFactory *PermissionedAccountFactorySession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _PermissionedAccountFactory.Contract.CreateAccount(&_PermissionedAccountFactory.TransactOpts, owner, salt)
}

// CreateAccount is a paid mutator transaction binding the contract method 0x5fbfb9cf.
//
// Solidity: function createAccount(address owner, uint256 salt) returns(address ret)
func (_PermissionedAccountFactory *PermissionedAccountFactoryTransactorSession) CreateAccount(owner common.Address, salt *big.Int) (*types.Transaction, error) {
	return _PermissionedAccountFactory.Contract.CreateAccount(&_PermissionedAccountFactory.TransactOpts, owner, salt)
}
